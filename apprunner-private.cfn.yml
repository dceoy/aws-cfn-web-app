---
AWSTemplateFormatVersion: 2010-09-09
Description: App Runner for a public web application
Parameters:
  ProjectName:
    Description: Set the project name.
    Type: String
    Default: webapp
  IamStackName:
    Description: Set the IAM stack name.
    Type: String
    Default: webapp-iam-roles-for-apprunner
  VpcStackName:
    Description: Set the VPC stack name.
    Type: String
    Default: webapp-vpc-private-subnets-with-endpoints
  EcrImageName:
    Description: Set the ECR image name.
    Type: String
  EcrImageTag:
    Description: Set the ECR image tag.
    Type: String
    Default: latest
  Cpu:
    Description: Set the number of CPU units reserved.
    Type: String
    AllowedPattern: 1024|2048|(1|2) vCPU
    Default: 1 vCPU
  Memory:
    Description: Set the amount of memory, in MB or GB, reserved.
    Type: String
    AllowedPattern: 2048|3072|4096|(2|3|4) GB
    Default: 2 GB
  ImagePort:
    Description: Set the port that the application listens to in the container.
    Type: String
    Default: 8080
Resources:
  AppRunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${AWS::Region}-${VpcStackName}-VPC
      GroupName: !Sub ${ProjectName}-ar-security-group
      GroupDescription: Security group for App Runner
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-security-group
  AppRunnerRequestsInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      # # VPC endpoint policies are not supported for App Runner.
      # PolicyDocument:
      #   Version: 2012-10-17
      #   Statement:
      #     - Resource: '*'
      #       Effect: Allow
      #       Principal: '*'
      #       Action: '*'
      # PrivateDnsEnabled: true
      SubnetIds:
        - Fn::ImportValue: !Sub ${AWS::Region}-${VpcStackName}-PrivateSubnet0
        - Fn::ImportValue: !Sub ${AWS::Region}-${VpcStackName}-PrivateSubnet1
        - Fn::ImportValue: !Sub ${AWS::Region}-${VpcStackName}-PrivateSubnet2
      SecurityGroupIds:
        - !Ref AppRunnerSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.apprunner.requests
      VpcEndpointType: Interface
      VpcId:
        Fn::ImportValue: !Sub ${AWS::Region}-${VpcStackName}-VPC
  AppRunnerVpcConnector:
    Type: AWS::AppRunner::VpcConnector
    Properties:
      VpcConnectorName: !Sub ${ProjectName}-ar-vpc-connector
      Subnets:
        - Fn::ImportValue: !Sub ${AWS::Region}-${VpcStackName}-PrivateSubnet0
        - Fn::ImportValue: !Sub ${AWS::Region}-${VpcStackName}-PrivateSubnet1
        - Fn::ImportValue: !Sub ${AWS::Region}-${VpcStackName}-PrivateSubnet2
      SecurityGroups:
        - !Ref AppRunnerSecurityGroup
  AppRunnerObservabilityConfiguration:
    Type: AWS::AppRunner::ObservabilityConfiguration
    Properties:
      ObservabilityConfigurationName: !Sub ${ProjectName}-ar-xray-tracing
      TraceConfiguration:
        Vendor: AWSXRAY
  AppRunnerService:
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName: !Sub ${ProjectName}-ar-service-private
      # AutoScalingConfigurationArn: ''
      HealthCheckConfiguration:
        HealthyThreshold: 1
        Interval: 5
        Path: /
        Protocol: TCP
        Timeout: 2
        UnhealthyThreshold: 5
      InstanceConfiguration:
        Cpu: !Ref Cpu
        Memory: !Ref Memory
        InstanceRoleArn:
          Fn::ImportValue: !Sub ${AWS::Region}-${IamStackName}-AppRunnerInstanceRole
      NetworkConfiguration:
        EgressConfiguration:
          EgressType: VPC
          VpcConnectorArn: !GetAtt AppRunnerVpcConnector.VpcConnectorArn
        IngressConfiguration:
          IsPubliclyAccessible: false
      ObservabilityConfiguration:
        ObservabilityConfigurationArn: !Ref AppRunnerObservabilityConfiguration
        ObservabilityEnabled: true
      SourceConfiguration:
        AuthenticationConfiguration:
          AccessRoleArn:
            Fn::ImportValue: !Sub ${AWS::Region}-${IamStackName}-AppRunnerECRAccessRole
        AutoDeploymentsEnabled: true
        ImageRepository:
          ImageRepositoryType: ECR
          ImageIdentifier: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrImageName}:${EcrImageTag}
          ImageConfiguration:
            Port: !Ref ImagePort
            # RuntimeEnvironmentSecrets: []
            # RuntimeEnvironmentVariables: []
            # StartCommand: ''
  AppRunnerVpcIngressConnection:
    Type: AWS::AppRunner::VpcIngressConnection
    Properties:
      VpcIngressConnectionName: !Sub ${ProjectName}-ar-vpc-ingress-connection
      IngressVpcConfiguration:
        VpcId:
          Fn::ImportValue: !Sub ${AWS::Region}-${VpcStackName}-VPC
        VpcEndpointId: !Ref AppRunnerRequestsInterfaceEndpoint
      ServiceArn: !Ref AppRunnerService
Outputs:
  AppRunnerServiceId:
    Description: AppRunner Service Id
    Value: !Ref AppRunnerService
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-AppRunnerService
  AppRunnerSecurityGroupId:
    Description: AppRunnerSecurityGroup Id
    Value: !Ref AppRunnerSecurityGroup
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-AppRunnerSecurityGroup
